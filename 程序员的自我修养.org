#+SETUPFILE: ~/.emacs.d/themes/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: \n:t
#+OPTIONS: tex:t
#+STARTUP: latexpreview
#+OPTIONS: tex:dvipng
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
#+attr_html: :width 300px
#+attr_latex: :width 300px
#+ATTR_ORG: :width 300

* 第一章 温故而知新
PC机:
- 高速的北桥芯片，用作CPU 内存 显卡通信
- 低速的南桥芯片，用作磁盘 USB 键鼠通信，汇总后连接到北桥

系统软件
- 操作系统
- 编译器，汇编器，链接器

interface
- underlayer 定义接口
- upperlayer 使用接口

APP -> (API) -> Running Lib -> (System call 0x80 softtware interrupt) -> Kernel -> (Hardware Spec) -> Hardware

机械磁盘使用LBA来防止磁道密度由内到外变稀疏的问题

虚拟内存
- 地址空间不隔离     <- 分段 或 分页
- 内存使用效率低     <- 分页
- 程序运行的址不确定 <- 分段 或 分页

共享内存 - 不同进程的虚拟页映射到同一个物理页

页权限属性，只有操作系统可能设置，保护进程

线程LWP:
- 线程ID
- PC指针
- 寄存器集合、堆栈
- 共享内存空间和进程级资源(文件和信号)

| 私有       | 共享         |
|------------+--------------|
| 局部变量   | 全局变量     |
| 函数参数   | 堆           |
| TLS        | 函数静态变量 |
| 寄存器数据 | 代码         |
|            | 文件，信号   |

进程调度
- 优先级 Priority Schedule
- 轮询   Round Robin

| 系统调用 | 作用                                 |
|----------+--------------------------------------|
| fork     | 复制当前进程                         |
| exec     | 使用新的可执行映像覆盖当前可执行映像 |
| clone    | 创建子进程并从指定位置开始执行       |

二元信号量和互斥锁的区别：互斥锁mutex要求acquire和release是一个线程
条件变量作用类似栅栏==wait until

优化
- 编译器优化
- CPU优化，动态调度, *不过我记得X86关掉了这个*
#+begin_src C++
volatile T* pInst = 0;
T* GetInst() {
    if(pInst == NULL) {
        lock();
        if (pInst == NULL)
            pInst = new T;
        unlock();
    }
}
/*问题出在pInst = new T, 如果是先返回对象再调用构造函数，那么有可能第二个线程拿到的没构造函数初始化过的对象*/
#+end_src

* 第二章 静态链接

| Name        | Tool         |
|-------------+--------------|
| Propressing | gcc -E (cpp) |
| Compilation | gcc -S (cc1) |
| Assemmbly   | gcc -c (as)  |
| Linking     | gcc (ld)     |

编译器前端：机器无关的中间代码
编译器后端: 目标机器代码

符号随着汇编语言的普及被迅速使用

链接：
- 地址和空间分配
- 符号决议
- 重定位

* 第三章 目标文件

设计.text和.data的原因:
- 指令和数据的权限不一样
- 缓存体系,提高程序的局限性
- 动态链接多进程共享同一个.text

#+begin_src C
int printf(const char *format, ...);

int global_init_var = 84;
int global_uninit_var;

void func1(int i)
{
    printf("%d\n", i);
}

int main(int argc, char *argv[])
{
    static int static_var = 85;
    static int static_var2;

    int a = 1;
    int b;

    func1(static_var + static_var2 + a + b);
    return 0;
}
#+end_src

目标文件格式
- .text 代码段
- .data 初始化了的全局静态变量和局部静态变量, 8个字节
- .rodata const和只读字符串, 640a就是字符\和字符n，最后以0结尾
- global_uninit_var放在了COM段

#+begin_src bash
readelf -h 2.o
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          812 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           40 (bytes)
  Number of section headers:         13
  Section header string table index: 12

readelf -S 2.o
There are 13 section headers, starting at offset 0x32c:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        00000000 000034 000064 00  AX  0   0  1
  [ 2] .rel.text         REL             00000000 000294 000028 08   I 10   1  4
  [ 3] .data             PROGBITS        00000000 000098 000008 00  WA  0   0  4
  [ 4] .bss              NOBITS          00000000 0000a0 000004 00  WA  0   0  4
  [ 5] .rodata           PROGBITS        00000000 0000a0 000004 00   A  0   0  1
  [ 6] .comment          PROGBITS        00000000 0000a4 00002d 01  MS  0   0  1
  [ 7] .note.GNU-stack   PROGBITS        00000000 0000d1 000000 00      0   0  1
  [ 8] .eh_frame         PROGBITS        00000000 0000d4 000064 00   A  0   0  4
  [ 9] .rel.eh_frame     REL             00000000 0002bc 000010 08   I 10   8  4
  [10] .symtab           SYMTAB          00000000 000138 000100 10     11  11  4
  [11] .strtab           STRTAB          00000000 000238 00005a 00      0   0  1
  [12] .shstrtab         STRTAB          00000000 0002cc 00005f 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)

readelf -s 2.o

Symbol table '.symtab' contains 16 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000000     0 FILE    LOCAL  DEFAULT  ABS 2.c
     2: 00000000     0 SECTION LOCAL  DEFAULT    1 
     3: 00000000     0 SECTION LOCAL  DEFAULT    3 
     4: 00000000     0 SECTION LOCAL  DEFAULT    4 
     5: 00000000     0 SECTION LOCAL  DEFAULT    5 
     6: 00000004     4 OBJECT  LOCAL  DEFAULT    3 static_var.1907
     7: 00000000     4 OBJECT  LOCAL  DEFAULT    4 static_var2.1908
     8: 00000000     0 SECTION LOCAL  DEFAULT    7 
     9: 00000000     0 SECTION LOCAL  DEFAULT    8 
    10: 00000000     0 SECTION LOCAL  DEFAULT    6 
    11: 00000000     4 OBJECT  GLOBAL DEFAULT    3 global_init_var
    12: 00000004     4 OBJECT  GLOBAL DEFAULT  COM global_uninit_var
    13: 00000000    28 FUNC    GLOBAL DEFAULT    1 func1
    14: 00000000     0 NOTYPE  GLOBAL DEFAULT  UND printf
    15: 0000001c    72 FUNC    GLOBAL DEFAULT    1 main

objdump -s -d 2.o

2.o:     file format elf32-i386

Contents of section .text:
 0000 5589e583 ec0883ec 08ff7508 68000000  U.........u.h...
 0010 00e8fcff ffff83c4 1090c9c3 8d4c2404  .............L$.
 0020 83e4f0ff 71fc5589 e55183ec 14c745f4  ....q.U..Q....E.
 0030 01000000 8b150400 0000a100 00000001  ................
 0040 c28b45f4 01c28b45 f001d083 ec0c50e8  ..E....E......P.
 0050 fcffffff 83c410b8 00000000 8b4dfcc9  .............M..
 0060 8d61fcc3                             .a..            
Contents of section .data:
 0000 54000000 55000000                    T...U...        
Contents of section .rodata:
 0000 25640a00                             %d..            
Contents of section .comment:
 0000 00474343 3a202847 4e552920 382e332e  .GCC: (GNU) 8.3.
 0010 31203230 31393035 30372028 52656420  1 20190507 (Red 
 0020 48617420 382e332e 312d3429 00        Hat 8.3.1-4).   
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 017c0801  .........zR..|..
 0010 1b0c0404 88010000 1c000000 1c000000  ................
 0020 00000000 1c000000 00410e08 8502420d  .........A....B.
 0030 0558c50c 04040000 28000000 3c000000  .X......(...<...
 0040 1c000000 48000000 00440c01 00471005  ....H....D...G..
 0050 02750043 0f03757c 06750c01 0041c543  .u.C..u|.u...A.C
 0060 0c040400                             ....            

Disassembly of section .text:

00000000 <func1>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 08             	sub    $0x8,%esp
   6:	83 ec 08             	sub    $0x8,%esp
   9:	ff 75 08             	pushl  0x8(%ebp)
   c:	68 00 00 00 00       	push   $0x0
  11:	e8 fc ff ff ff       	call   12 <func1+0x12>
  16:	83 c4 10             	add    $0x10,%esp
  19:	90                   	nop
  1a:	c9                   	leave  
  1b:	c3                   	ret    

0000001c <main>:
  1c:	8d 4c 24 04          	lea    0x4(%esp),%ecx
  20:	83 e4 f0             	and    $0xfffffff0,%esp
  23:	ff 71 fc             	pushl  -0x4(%ecx)
  26:	55                   	push   %ebp
  27:	89 e5                	mov    %esp,%ebp
  29:	51                   	push   %ecx
  2a:	83 ec 14             	sub    $0x14,%esp
  2d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
  34:	8b 15 04 00 00 00    	mov    0x4,%edx
  3a:	a1 00 00 00 00       	mov    0x0,%eax
  3f:	01 c2                	add    %eax,%edx
  41:	8b 45 f4             	mov    -0xc(%ebp),%eax
  44:	01 c2                	add    %eax,%edx
  46:	8b 45 f0             	mov    -0x10(%ebp),%eax
  49:	01 d0                	add    %edx,%eax
  4b:	83 ec 0c             	sub    $0xc,%esp
  4e:	50                   	push   %eax
  4f:	e8 fc ff ff ff       	call   50 <main+0x34>
  54:	83 c4 10             	add    $0x10,%esp
  57:	b8 00 00 00 00       	mov    $0x0,%eax
  5c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  5f:	c9                   	leave
  60:	8d 61 fc             	lea    -0x4(%ecx),%esp
  63:	c3                   	ret

#+end_src

更多的段
| Name        | Description                               |
|-------------+-------------------------------------------|
| .rodata1    | read only data                            |
| .comment    | compiler version                          |
| .debug      | debug info                                |
| .dynamic    | dynamic link info                         |
| .hash       | symbol hash table                         |
| .line       | file line for debug                       |
| .note       | additional compiler info                  |
| .strtab     | string table, symbol name                 |
| .symtabl    | symbol table                              |
| .shstrtab   | section string table, section name        |
| .plt .got   | dynamic jump table and global entry table |
| .init .fini | init and fini code                        |

objcopy可以将任意文件放在elf里


#+begin_src bash
objcopy -I binary -O elf32-i386 -B i386 1.o 11.o
ojdump -ht 11.o

11.o:     file format elf32-i386

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000534  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
SYMBOL TABLE:
00000000 l    d  .data	00000000 .data
00000000 g       .data	00000000 _binary_1_o_start
00000534 g       .data	00000000 _binary_1_o_end
00000534 g       *ABS*	00000000 _binary_1_o_size


readelf -h 11.o
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          1552 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           40 (bytes)
  Number of section headers:         5
  Section header string table index: 4

readelf -S 11.o
There are 5 section headers, starting at offset 0x610:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .data             PROGBITS        00000000 000034 000534 00  WA  0   0  1
  [ 2] .symtab           SYMTAB          00000000 000568 000050 10      3   2  4
  [ 3] .strtab           STRTAB          00000000 0005b8 000034 00      0   0  1
  [ 4] .shstrtab         STRTAB          00000000 0005ec 000021 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)
[xuali2@sha-isbu-ed15n xuali2]$readelf -s 11.o

Symbol table '.symtab' contains 5 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000000     0 SECTION LOCAL  DEFAULT    1 
     2: 00000000     0 NOTYPE  GLOBAL DEFAULT    1 _binary_1_o_start
     3: 00000534     0 NOTYPE  GLOBAL DEFAULT    1 _binary_1_o_end
     4: 00000534     0 NOTYPE  GLOBAL DEFAULT  ABS _binary_1_o_size

#+end_src

__attribute__((section("name"))) 修饰可以指定段

** ELF文件结构

- 段表、字符串表等控制信息段都在文件后面
- REL 重定位文件 EXEC 可执行文件 DYN 共享目标文件
- 符号表里的值目标文件是 *段内偏移* ，可执行文件是 *虚拟地址*

| ELF Header           |
|----------------------|
| .text                |
|----------------------|
| .data                |
|----------------------|
| .bss                 |
|----------------------|
| ...                  |
|----------------------|
| section header table |
|----------------------|
| string tables        |
|----------------------|
| symbol tables        |
| ...                  |

特殊符号
| Name                 | Description    |
|----------------------+----------------|
| __executable_start   | 程序最开始地址 |
| __etext&_etext&etext | 程序末尾地址   |
| _edata&edata         | 数据段结束地址 |
| _end&end             | 程序结束地址   |

符号修饰
- C++ 关键的概念是函数签名: 函数名+参数类型+所在类+命令空间，基于此生成符号名
- 导致不同编译器之间不能相互链接的主要原因是生成符号的规则不一样

extern C
- C++语法，修饰内的代码当作C语言代码处理，生成符号基于C语言规则
- 一个头文件同时支持C,C++
#+begin_src C

#ifdef __cplusplus
extern "C" {
#endif

void *memset(void *, int, size_t);

#ifdef __cplusplus
}
#endif
#+end_src

弱符号
- 强符号不可重复定义
- 强符号覆盖弱符号
- 弱符号选占用空间最大的一个，如果有多个同样空间的，随机?

弱引用
- 未定义默认为0
- 库中的弱符号可以被用户定义的强符号所覆盖
- 例: -lpthread决定glibc是单线程还是多线程版本，可以判断pthreadcreate是否为0来看是否为多线程版本，也可以直接看link的so库

调试信息
- ELF使用DWART(debug with arbitrary record format)
- Microsoft使用CodeView

* 第四章 静态链接

#+begin_src C
  /* gcc -m32 -c a.c b.c -Wno-implicit-function-declaration */
  /* ld a.o b.o -e main -o ab -m elf_i386 */
  /* a.c */
  extern int shared;

  int main()
  {
      int a = 100;
      swap(&a, &shared);
  }

  /* b.c */
  int shared = 1;

  void swap(int *a, int *b)
  {
      ,*a ^= *b ^= *a ^= *b ;
  }

#+end_src

两步链接Two-pass Linking:
- 空间与地址分配
指的是可执行文件中的空间
- 符号解析与重定位

#+begin_src bash
  gcc -m32 -c a.c -Wno-implicit-function-declaration
  readelf -S a.o
  There are 12 section headers, starting at offset 0x218:

  Section Headers:
    [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
    [ 0]                   NULL            00000000 000000 000000 00      0   0  0
    [ 1] .text             PROGBITS        00000000 000034 000039 00  AX  0   0  1
    [ 2] .rel.text         REL             00000000 0001a8 000010 08   I  9   1  4
    [ 3] .data             PROGBITS        00000000 00006d 000000 00  WA  0   0  1
    [ 4] .bss              NOBITS          00000000 00006d 000000 00  WA  0   0  1
    [ 5] .comment          PROGBITS        00000000 00006d 00002d 01  MS  0   0  1
    [ 6] .note.GNU-stack   PROGBITS        00000000 00009a 000000 00      0   0  1
    [ 7] .eh_frame         PROGBITS        00000000 00009c 000044 00   A  0   0  4
    [ 8] .rel.eh_frame     REL             00000000 0001b8 000008 08   I  9   7  4
    [ 9] .symtab           SYMTAB          00000000 0000e0 0000b0 10     10   8  4
    [10] .strtab           STRTAB          00000000 000190 000016 00      0   0  1
    [11] .shstrtab         STRTAB          00000000 0001c0 000057 00      0   0  1
  Key to Flags:
    W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
    L (link order), O (extra OS processing required), G (group), T (TLS),
    C (compressed), x (unknown), o (OS specific), E (exclude),
    p (processor specific)

  gcc -m32 -c b.c -Wno-implicit-function-declaration
  readelf -S b.o
  There are 11 section headers, starting at offset 0x1ec:

  Section Headers:
    [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
    [ 0]                   NULL            00000000 000000 000000 00      0   0  0
    [ 1] .text             PROGBITS        00000000 000034 000039 00  AX  0   0  1
    [ 2] .data             PROGBITS        00000000 000070 000004 00  WA  0   0  4
    [ 3] .bss              NOBITS          00000000 000074 000000 00  WA  0   0  1
    [ 4] .comment          PROGBITS        00000000 000074 00002d 01  MS  0   0  1
    [ 5] .note.GNU-stack   PROGBITS        00000000 0000a1 000000 00      0   0  1
    [ 6] .eh_frame         PROGBITS        00000000 0000a4 000038 00   A  0   0  4
    [ 7] .rel.eh_frame     REL             00000000 000190 000008 08   I  8   6  4
    [ 8] .symtab           SYMTAB          00000000 0000dc 0000a0 10      9   8  4
    [ 9] .strtab           STRTAB          00000000 00017c 000011 00      0   0  1
    [10] .shstrtab         STRTAB          00000000 000198 000053 00      0   0  1
  Key to Flags:
    W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
    L (link order), O (extra OS processing required), G (group), T (TLS),
    C (compressed), x (unknown), o (OS specific), E (exclude),
    p (processor specific)

  ld  a.o b.o -o ab -m elf_i386   # *注意，运行会出错*
  readelf -S ab
  There are 8 section headers, starting at offset 0x11b4:

  Section Headers:
    [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
    [ 0]                   NULL            00000000 000000 000000 00      0   0  0
    [ 1] .text             PROGBITS        08048094 000094 000072 00  AX  0   0  1
    [ 2] .eh_frame         PROGBITS        08048108 000108 000064 00   A  0   0  4
    [ 3] .data             PROGBITS        0804a000 001000 000004 00  WA  0   0  4
    [ 4] .comment          PROGBITS        00000000 001004 00002c 01  MS  0   0  1
    [ 5] .symtab           SYMTAB          00000000 001030 000100 10      6   9  4
    [ 6] .strtab           STRTAB          00000000 001130 000048 00      0   0  1
    [ 7] .shstrtab         STRTAB          00000000 001178 00003a 00      0   0  1
  Key to Flags:
    W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
    L (link order), O (extra OS processing required), G (group), T (TLS),
    C (compressed), x (unknown), o (OS specific), E (exclude),
    p (processor specific)

  objdump -h a.o

  a.o:     file format elf32-i386

  Sections:
  Idx Name          Size      VMA       LMA       File off  Algn
    0 .text         00000039  00000000  00000000  00000034  2**0
                    CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
    1 .data         00000000  00000000  00000000  0000006d  2**0
                    CONTENTS, ALLOC, LOAD, DATA
    2 .bss          00000000  00000000  00000000  0000006d  2**0
                    ALLOC
    3 .comment      0000002d  00000000  00000000  0000006d  2**0
                    CONTENTS, READONLY
    4 .note.GNU-stack 00000000  00000000  00000000  0000009a  2**0
                    CONTENTS, READONLY
    5 .eh_frame     00000044  00000000  00000000  0000009c  2**2
                    CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  objdump -h b.o

  b.o:     file format elf32-i386

  Sections:
  Idx Name          Size      VMA       LMA       File off  Algn
    0 .text         00000039  00000000  00000000  00000034  2**0
                    CONTENTS, ALLOC, LOAD, READONLY, CODE
    1 .data         00000004  00000000  00000000  00000070  2**2
                    CONTENTS, ALLOC, LOAD, DATA
    2 .bss          00000000  00000000  00000000  00000074  2**0
                    ALLOC
    3 .comment      0000002d  00000000  00000000  00000074  2**0
                    CONTENTS, READONLY
    4 .note.GNU-stack 00000000  00000000  00000000  000000a1  2**0
                    CONTENTS, READONLY
    5 .eh_frame     00000038  00000000  00000000  000000a4  2**2
                    CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

  objdump -h ab

  ab:     file format elf32-i386

  Sections:
  Idx Name          Size      VMA       LMA       File off  Algn
    0 .text         00000072  08048094  08048094  00000094  2**0
                    CONTENTS, ALLOC, LOAD, READONLY, CODE
    1 .eh_frame     00000064  08048108  08048108  00000108  2**2
                    CONTENTS, ALLOC, LOAD, READONLY, DATA
    2 .data         00000004  0804a000  0804a000  00001000  2**2
                    CONTENTS, ALLOC, LOAD, DATA
    3 .comment      0000002c  00000000  00000000  00001004  2**0
                    CONTENTS, READONLY
#+end_src

** 重定位

#+begin_src bash
objdump -d a.o

a.o:     file format elf32-i386


Disassembly of section .text:

00000000 <main>:
   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   4:	83 e4 f0             	and    $0xfffffff0,%esp
   7:	ff 71 fc             	pushl  -0x4(%ecx)
   a:	55                   	push   %ebp
   b:	89 e5                	mov    %esp,%ebp
   d:	51                   	push   %ecx
   e:	83 ec 14             	sub    $0x14,%esp
  11:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%ebp)
  18:	83 ec 08             	sub    $0x8,%esp
  1b:	68 00 00 00 00       	push   $0x0
  20:	8d 45 f4             	lea    -0xc(%ebp),%eax
  23:	50                   	push   %eax
  24:	e8 fc ff ff ff       	call   25 <main+0x25>
  29:	83 c4 10             	add    $0x10,%esp
  2c:	b8 00 00 00 00       	mov    $0x0,%eax
  31:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  34:	c9                   	leave  
  35:	8d 61 fc             	lea    -0x4(%ecx),%esp
  38:	c3                   	ret 
#+end_src

- 68 *00 00 00 00*, 这个是shared的地址，重定位前是0
- e8 *fc ff ff ff*, 这个是swap的地址，重定位前是-4相对偏移，也就是本身

#+begin_src bash
objdump -d ab

ab:     file format elf32-i386


Disassembly of section .text:

08048094 <main>:
 8048094:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048098:	83 e4 f0             	and    $0xfffffff0,%esp
 804809b:	ff 71 fc             	pushl  -0x4(%ecx)
 804809e:	55                   	push   %ebp
 804809f:	89 e5                	mov    %esp,%ebp
 80480a1:	51                   	push   %ecx
 80480a2:	83 ec 14             	sub    $0x14,%esp
 80480a5:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%ebp)
 80480ac:	83 ec 08             	sub    $0x8,%esp
 80480af:	68 00 a0 04 08       	push   $0x804a000
 80480b4:	8d 45 f4             	lea    -0xc(%ebp),%eax
 80480b7:	50                   	push   %eax
 80480b8:	e8 10 00 00 00       	call   80480cd <swap>
 80480bd:	83 c4 10             	add    $0x10,%esp
 80480c0:	b8 00 00 00 00       	mov    $0x0,%eax
 80480c5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 80480c8:	c9                   	leave  
 80480c9:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80480cc:	c3                   	ret   


080480cd <swap>:
 80480cd:	55                   	push   %ebp
#+end_src

- 68 *00 a0 04 08*, 这个是shared的地址，重定位后是0x0804a000
- e8 *10 00 00 00*, 这个是swap的地址，重定位前是+0x10相对偏移，也就是swap的开始

** 重定位表

- ".rel." 开头是重定位表
- 段表里的info指定要重定位的段
- 组成
| r_offset | 相对偏移                                                                                       |
| r_info   | 低8位为重定位类型， R_386_32为绝对寻址，R_386_PC32为相对寻址修正, 高24位为符号在符号表里的下标 |
- 重定位项在符号表里的类型为UND
- 对于弱符号，由于不知道最终大小是多少，所以不能放在bss段，要放在COMMON段等链接时决议，这说明不在COMMON段的全局变量符号都是强符号

#+begin_src bash

readelf -r a.o

Relocation section '.rel.text' at offset 0x1a8 contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
0000001c  00000901 R_386_32          00000000   shared
00000025  00000a02 R_386_PC32        00000000   swap

Relocation section '.rel.eh_frame' at offset 0x1b8 contains 1 entry:
 Offset     Info    Type            Sym.Value  Sym. Name
00000020  00000202 R_386_PC32        00000000   .text

#+end_src

C++特性编译实现
- template，虚函数表，每个实例在单独一个段中，链接时Link Once，实现重复代码消除
- -ffunction-sections和-fdata-sections可能实现函数级链接而非文件级链接
- 全局对象构造和析构分别存在.init和.fini段在main前和后执行

ABI
| Name | Desc           |
|------+----------------|
| API  | 源代码级的接口 |
| ABI  | 二进制级的接口 |

objdump -t 查看静态库符号表
ar -t      查看打包文件
ar -x      解压
gcc -static 静态链接库
gcc --verbose 打印详细信息

** 链接控制脚本
使用命令控制链接过程
#+begin_src c
  # gcc -m32 -c -fno-builtin tiny.c
  # ld -static -e nomain -o tiny tiny.o -m elf_i386
  char *str = "Hello world!\n";

  void print()
  {
      asm("movl $13, %%edx \n\t"
          "movl %0, %%ecx \n\t"
          "movl $0, %%ebx \n\t"
          "movl $4, %%eax \n\t"
          "int $0x80      \n\t"
          ::"r"(str):"edx","ecx","ebx");
  }

  void exit()
  {
      asm("movl $42, %ebx \n\t"
          "movl $1, %eax  \n\t"
          "int $0x80      \n\t");
  }

  void nomain()
  {
      print();
      exit();
  }
#+end_src
#+begin_src bash
readelf -h tiny
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x80480c6
  Start of program headers:          52 (bytes into file)
  Start of section headers:          4544 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         3
  Size of section headers:           40 (bytes)
  Number of section headers:         9
  Section header string table index: 8

readelf -S tiny
There are 9 section headers, starting at offset 0x11c0:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        08048094 000094 000042 00  AX  0   0  1
  [ 2] .rodata           PROGBITS        080480d6 0000d6 00000e 00   A  0   0  1
  [ 3] .eh_frame         PROGBITS        080480e4 0000e4 00007c 00   A  0   0  4
  [ 4] .data             PROGBITS        0804a000 001000 000004 00  WA  0   0  4
  [ 5] .comment          PROGBITS        00000000 001004 00002c 01  MS  0   0  1
  [ 6] .symtab           SYMTAB          00000000 001030 000100 10      7   9  4
  [ 7] .strtab           STRTAB          00000000 001130 00004c 00      0   0  1
  [ 8] .shstrtab         STRTAB          00000000 00117c 000042 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)
objdump -s -d tiny

tiny:     file format elf32-i386

Contents of section .text:
 8048094 5589e553 a100a004 08ba0d00 000089c1  U..S............
 80480a4 bb000000 00b80400 0000cd80 905b5dc3  .............[].
 80480b4 5589e5bb 2a000000 b8010000 00cd8090  U...*...........
 80480c4 5dc35589 e5e8c6ff ffffe8e1 ffffff90  ].U.............
 80480d4 5dc3                                 ].              
Contents of section .rodata:
 80480d6 48656c6c 6f20776f 726c6421 0a00      Hello world!..  
Contents of section .eh_frame:
 80480e4 14000000 00000000 017a5200 017c0801  .........zR..|..
 80480f4 1b0c0404 88010000 20000000 1c000000  ........ .......
 8048104 90ffffff 20000000 00410e08 8502420d  .... ....A....B.
 8048114 05418303 5ac341c5 0c040400 1c000000  .A..Z.A.........
 8048124 40000000 8cffffff 12000000 00410e08  @............A..
 8048134 8502420d 054ec50c 04040000 1c000000  ..B..N..........
 8048144 60000000 7effffff 10000000 00410e08  `...~........A..
 8048154 8502420d 054cc50c 04040000           ..B..L......    
Contents of section .data:
 804a000 d6800408                             ....            
Contents of section .comment:
 0000 4743433a 2028474e 55292038 2e332e31  GCC: (GNU) 8.3.1
 0010 20323031 39303530 37202852 65642048   20190507 (Red H
 0020 61742038 2e332e31 2d342900           at 8.3.1-4).    

Disassembly of section .text:

08048094 <print>:
 8048094:	55                   	push   %ebp
 8048095:	89 e5                	mov    %esp,%ebp
 8048097:	53                   	push   %ebx
 8048098:	a1 00 a0 04 08       	mov    0x804a000,%eax
 804809d:	ba 0d 00 00 00       	mov    $0xd,%edx
 80480a2:	89 c1                	mov    %eax,%ecx
 80480a4:	bb 00 00 00 00       	mov    $0x0,%ebx
 80480a9:	b8 04 00 00 00       	mov    $0x4,%eax
 80480ae:	cd 80                	int    $0x80
 80480b0:	90                   	nop
 80480b1:	5b                   	pop    %ebx
 80480b2:	5d                   	pop    %ebp
 80480b3:	c3                   	ret    

080480b4 <exit>:
 80480b4:	55                   	push   %ebp
 80480b5:	89 e5                	mov    %esp,%ebp
 80480b7:	bb 2a 00 00 00       	mov    $0x2a,%ebx
 80480bc:	b8 01 00 00 00       	mov    $0x1,%eax
 80480c1:	cd 80                	int    $0x80
 80480c3:	90                   	nop
 80480c4:	5d                   	pop    %ebp
 80480c5:	c3                   	ret    

080480c6 <nomain>:
 80480c6:	55                   	push   %ebp
 80480c7:	89 e5                	mov    %esp,%ebp
 80480c9:	e8 c6 ff ff ff       	call   8048094 <print>
 80480ce:	e8 e1 ff ff ff       	call   80480b4 <exit>
 80480d3:	90                   	nop
 80480d4:	5d                   	pop    %ebp
 80480d5:	c3                   	ret   
#+end_src

使用链接脚本

- 设置当前虚拟地址
- 设置tinytext段，包含.text .data .rodata
- 丢弃.comment段

#+begin_src bash
  # ld -static -T tiny.lds -o tiny tiny.o -m elf_i386
  ENTRY(nomain)

  SECTIONS
  {
      . = 0x08048000 + SIZEOF_HEADERS;
      tinytext  : {*(.text) *(.data) *(.rodata)}
      /DISCARD/ : {*(.comment)}
  }
#+end_src

*可执行文件中，符号表和字符串表是可选的,可被strip,但是段表字符串表为必须*

#+begin_src bash
readelf -h tiny
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x8048122
  Start of program headers:          52 (bytes into file)
  Start of section headers:          588 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         2
  Size of section headers:           40 (bytes)
  Number of section headers:         6
  Section header string table index: 5
readelf -S tiny
There are 6 section headers, starting at offset 0x24c:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .eh_frame         PROGBITS        08048074 000074 00007c 00   A  0   0  4
  [ 2] tinytext          PROGBITS        080480f0 0000f0 000056 00 WAX  0   0  4
  [ 3] .symtab           SYMTAB          00000000 000148 0000a0 10      4   6  4
  [ 4] .strtab           STRTAB          00000000 0001e8 000034 00      0   0  1
  [ 5] .shstrtab         STRTAB          00000000 00021c 00002e 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)

strip tiny
readelf -S tiny
There are 4 section headers, starting at offset 0x164:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .eh_frame         PROGBITS        08048074 000074 00007c 00   A  0   0  4
  [ 2] tinytext          PROGBITS        080480f0 0000f0 000056 00 WAX  0   0  4
  [ 3] .shstrtab         STRTAB          00000000 000146 00001e 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)

#+end_src

