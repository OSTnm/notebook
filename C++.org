#+SETUPFILE: ~/.emacs.d/themes/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: \n:t
#+OPTIONS: ^:nil
#+OPTIONS: tex:t
#+STARTUP: latexpreview
#+OPTIONS: tex:dvipng
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
#+attr_html: :width 300px
#+attr_latex: :width 300px
#+ATTR_ORG: :width 300

#+TITLE: C++ - 特性太多太复杂的语言

*上选java下选c，中不取c++*

* 基础学习
** 快速入门

访问程序返回值
- linux: echo $?
- win  : echo %ERRORLEVEL%

标准输入/输出
| istream -> cin  | 标准输入         |
| ostream -> cout | 标准输出         |
| ostream -> cerr | 标准错误         |
| ostream -> clog | 程序执行一般信息 |

cout, cin等输入、输出流对象返回值(调用方法)为输入、输出流本身，所以可以 cout << .... << .... <<

endl - 换行，默认 *同时刷新缓冲区*

定义一个类 == 定义了一种类型，类型名与类名相同

类方法 - 成员函数 - 由类定义的函火女禾禾

同一类型的所有对象共享同一个定义方法

** 基本语言

语言特性:允许自定义数据类型、提供库，妈实用函数和数据类型

单个unsigned == unsigned int

字面值常量有默认类型: 0 - int, 3.1415 - double

转义字符 \000 -> 八进制  \xddd -> 十六进制

两个相邻的字符串可连接，如 std::cout << "Hello World" "I'm" << endl;

#+begin_src c++
using namespace std;
#include <iostream>

int main(int argc, char *argv[])
{
    int val1(1024);             // 直接初始化
    int val2 = 1024;            // 复制初始化

    cout << val1 << "  " << val2 << endl;
    return 0;
}
#+end_src

构造函数 - 如何进行初始化的成员函数, *在gcc中，构造函数会在对象实例化后被调用*
对象定义后立即可见，可用同一定义中前面已定义变量的值初始化后面的变量

最大公约数 - 辗转相除法

#+begin_src c++
extern double pi = 3.14;       // 仍被当作定义，只有extern用作函数外部，才可以有初始化式
#+end_src

*C语言对于单个文件，为什么函数可不用声明直接调用， 不在此文件中的变量不可直接使用?*
*对函数，C风格有统一的ABI，C可根据入参直接生成汇编代码，而变量不知类型，不知占用空间大小，所以使用前需声明，对于C++，因为重载特性，入参类型会作为函数名的一部分，所以不能直接调用*

const限定符，将对象转化为常量，必须赋初值
全局作用域下的const变量，其作用域在文件内，除非定义时加上extern关键字
const修饰后编译时会直接转化为常量，如：
#+begin_src c++
using namespace std;
#include <iostream>

// 5 15
int main(int argc, char *argv[])
{
    const int x = 5;
    int *y = (int *)&x;

    *y = 15;
    cout << x << "  " << *y << endl; //相当于 cout << 5 << "  " << *y << endl;

    return 0;
}
#+end_src

引用是别名，必须初始化而且同一类型
#+begin_src c++
using namespace std;
#include <iostream>

// 10 10
int main(int argc, char *argv[])
{
    int val = 1024;
    int &val2 = val;

    val = 10;
    cout << val << "  " << val2 << endl;

    return 0;
}
#+end_src

枚举类型的对象的初始化或赋值，只能通过其枚举成员或同一枚举类型的其他对象来进行

*C语言中指明全局变量和static变量的初始化式必须为常量表达式，但是C++可以使用函数初始化，编译器实现为.finit段，在main执行前会执行.finit段中的函数*

头文件 <> - 查找在预定义位置，不找源文件所在路径
头文件 "" - 源文件所在路径, 后找预定义位置

class和struct关键字定义类区别在于默认访问权限
struct -> public
class  -> private

** 标准库类型

using namespace::name; - 此后无需再加命令空间前缀

- string
对于字符串长度有限制，不可大于long，重载了 + char 和 char *
#+begin_src c++
using namespace::std;
#include <iostream>

int main(int argc, char *argv[])
{
    string s1;
    string s2(s1);
    string s3("value");
    string s4(5, 'c');

    cout << s1 << endl; // 空
    cout << s2 << endl; // 空
    cout << s3 << endl; // value
    cout << s4 << endl; // ccccc

    cout << s1.empty() << endl; // 1
    cout << s3.size()  << endl; // 5
    cout << s3[0]      << endl; // v
    cout << s3 + s4    << endl; // valueccccc
    cout << (s3 == s4) << endl; // 0
    return 0;
}
#+end_src

::i 代表全局变量，用于局部变量重名覆盖时引用全局变量
#+begin_src c++
using namespace::std;
#include <iostream>

class A
{
public:
    A();
    virtual ~A();

    typedef int size;
};


int main(int argc, char *argv[])
{
    A::size i = 0;

    cout << i << endl;
    return 0;
}
#+end_src
- vector
#+begin_src c++
#include <iostream>
#include <vector>
#include <string>
using namespace::std;

int main(int argc, char *argv[])
{
    vector<string> v1;
    vector<string> v2(v1);
    vector<string> v3(5, "name");
    int i;

    for (i = 0; i < 5; ++i) {
        cout << v3[i] << endl;
    }


    return 0;
}
#+end_src

- iterator
#+begin_src c++
#include <iostream>
#include <vector>
#include <string>
using namespace::std;

int main(int argc, char *argv[])
{
    vector<string>           v3(5, "name");

    for(vector<string>::iterator iter = v3.begin(); iter != v3.end();++iter)
        cout << *iter << "\n";
    return 0;
}
#+end_src

- bitset
值比实际位少时，高阶位为0，string与bitset对象为反向转化，string对象的最右边为bitset低阶位
#+begin_src c++
#include <iostream>
#include <vector>
using namespace::std;

int main(int argc, char *argv[])
{
    bitset<12> b1("01010");

    cout << b1 << "\n";         // 000000001010
    return 0;
}
#+end_src

** 数组与指针
#+begin_src c++
#include <iostream>
using namespace::std;

int main(int argc, char *argv[])
{
    char a[3] = "12";
    char b[3] = "123";          // error: initializer-string for char array is too long
    int  c[3] = "12";           // error: array initializer must be an initializer list

    return 0;
}
#+end_src

- 动态数组
使用new，会将申请内存初始化，如果为类类型，将用默认构造函数初始化
#+begin_src c++
#include <iostream>
using namespace::std;

class A
{
public:
    A() {};
    virtual ~A() {};
};


int main(int argc, char *argv[])
{
    A *x = new A[2];
    A y[2];
    delete []x;
    return 0;
}
#+end_src

** 表达式

常规的和C相关
强制转换static_cast、dynamic_cast、const_cast、reinterpret_cast
#+begin_src c++
#include <iostream>
using namespace::std;

int main(int argc, char *argv[])
{
    char a = 'a';
    int b = static_cast<char>(a);//正确，将char型数据转换成int型数据

    double *c = new double;
    void *d = static_cast<void*>(c);//正确，将double指针转换成void指针

    int e = 10;
    const int f = static_cast<const int>(e);//正确，将int型数据转换成const int型数据

    const int g = 20;
    int *h = static_cast<int*>(&g);//编译错误，static_cast不能转换掉g的const属性
    return 0;
}
#+end_src

** 语句

只有构造函数可用 函数名():变量(值)的方法初始化变量
#+begin_src c++
#include <iostream>

class A
{
public:
    int i;
    A():i(1) {};
    virtual ~A() {};
};


int main(int argc, char *argv[])
{
    A x;

    std::cout << x.i << std::endl;
    return 0;
}
#+end_src

** 函数
对于引用形参
- 类型要严格匹配
- const不可传入非const
- 右值/具有需要转换的类型的对象

应将不修改相应实参的形参定义为const，因为这可以扩大函数的使用。因为非const引用形参既不能用const对象初始化，也不能用字面值或右值的表达试实参初始化

如果为引用数组，编译器不会将数组实参转化为指针，而是传递数组的引用本身，则数组大小成为形参和实参的一部分，编译器会检查大小，也不可将引用形参当指针给其赋值，而是要真正当作数组

*对于成员函数，如果在类中定义，则符号为weak，并且在本地文件里如果不调用函数则不会生成符号，而如果在类中声明类外定义，则为全局符号，如果文件内没使用也会生成符号*

*通常来说，在头文件(*.h)里声明类定义，在(*.cpp)里定义成员函数的实现*

对于临时对象，析构会在函数退出时调用
#+begin_src c++
#include <iostream>

class A
{
public:
    A() { std::cout << "A ctor" << "\n";};
    virtual ~A() {std::cout << "A dtor" << "\n";};
};

class B
{
public:
    B() { std::cout << "B ctor" << "\n";};
    virtual ~B() {std::cout << "B dtor" << "\n";};
};


//A ctor
//B ctor
//B dtor
//A dtor
int main(int argc, char *argv[])
{
    A x;
    B y;
    return 0;
}
#+end_src

** 标准I/O库

IO对象不可复制或赋值
- 不可存于容器
- 形参/返回类型不能为流类

当输入流与输出流绑在一起时，任何读输入流的尝试都将首先刷新其输出流关联的缓冲区

* 容器和算法
** 顺序容器
| vector | 快速随机访问  |
| list   | 快速插入/删除 |
| deque  | 双端队列      |
在以上三种容器定义新的操作接口
| stack          | 栈         |
| queue          | 队列       |
| priority_queue | 优先级队列 |

初始化
| c<T> c;       | N.A.                              |
| c<T> c(c2);   | N.A.                              |
| c<T> c(b, e); | b, e是迭代器,标示范围内元素的副本 |
| c<T> c(n, t); | 用n个值为t的元素创建容器          |
| c<T> c(n);    | n个值初始化元素容器c              |

对于迭代器赋初值，只要容器类型与元素类型兼容，即可复制，而无需严格一致

添加元素
| c.push_back(t)  | 尾部添加，只适用                        |
| c.push_front(t) | 首部tian添加，只适用于list和deque       |
| c.insert(p,t)   | 迭代器p所指向的元素前插入值为t的新元素  |
| c.insert(p,n,t) | 迭代器p前插入n个值为t的新元素           |
| c.insert(p,b,e) | 迭代器p前插入迭代器b和e标记范围内的元素 |

删除元素
| c.erase(p)    | 删除p指向的元素，返回值指向被删除元素后面的元素 |
| c.erase(b,e)  | 左闭右开，删除b和e内标记的元素                  |
| c.clear()     | 删除所有，返回void                              |
| c.pop_back()  | 删除最后一个元素                                |
| c.pop_front() | 删除第一个元素，返回void，只用于list，deque     |

容器赋值
| c1 = c2       | 删除容器c1的所有元素，然后将c2赋给c1                    |
| c1.swap(c2)   | c1、c2元素交换                                          |
| c.assign(b,e) | 将迭代器b和e标记范围内所有元素复制到c中，b,e必须不在c中 |
| c.assgin(n,t) | 将容器c重新设置为存储n个值为t的元素                     |

swap操作后，迭代器不会失效，只不过代码的容器换了(由c1变成c2)

capacity()  查看vector预留空间
reserve(i)  将预留空间设为i，i需大于默认预留空间

assign 只要求元素类型可兼容
swap   要求容器类型和元素类型可兼容

*为了使vector容量实现快速的内存分配，其实际分配的容量要比当前所需的空间多一些，用于缓解增加元素导致的内存释放申请的问题*

** 关联容器

通过key存储和读取元素 map与set
#+begin_src c++
#include <iostream>
#include <map>
using namespace std;

int main(int argc, char *argv[])
{
    std::map<int, string> m;
    map<int, string>::iterator iter;

    m.insert(pair<int, string>(1, "one"));
    m[2] = "two";

    for(iter = m.begin(); iter != m.end(); iter++)
        cout << iter->first << "  " << iter->second << endl;

    iter = m.find(1);
    cout << iter->first << "\n";

    m.erase(1);
    m.clear();

    return 0;
}
#+end_src

set 每个值只会出现一次，这个值就是键，键为只读不可更改
#+begin_src c++
#include <iostream>
#include <set>
using namespace std;

int main(int argc, char *argv[])
{
    set<int> s;
    set<int>::iterator iter;

    s.insert(1);
    s.insert(1);

    for(iter = s.begin(); iter != s.end(); iter++)
        cout << *iter << endl;

    iter = s.find(1);
    cout << *iter << "\n";

    s.erase(1);
    s.clear();

    return 0;
}
#+end_src

** 泛型算法
accumulate 以第三个入参类型为准，前两个迭代器范围是先强转为第三个参数类型再相加

#+begin_src c++
//===123456
#include <iostream>
#include <vector>
#include <numeric>
using namespace std;

int main(int argc, char *argv[])
{
    vector<string> x;

    x.push_back("123");
    x.push_back("456");

    string sum = accumulate(x.begin() , x.end() , string("==="));
    cout << sum << "\n";
    return 0;
}
#+end_src


迭代器种类
| 输入     | 只读，不能写，只支持自增      |
| 输出     | 只写，不能读，     只支持自增 |
| 前向     | 读和写，只支持自增            |
| 反向     | 读和写，支持自增自减          |
| 随机访问 | 读和写，支持完整迭代器        |

* 类和数据抽象
** 类
class 类名; //前向声明
在声明之后，定义之前，为不完全类型，不可定义对象，只能用于定义指向该类型的指针及引用或者用于定义使用该类型作为形参类型或返回类型的函数

类定义，编译成员声明，所有成员出现后，才编译定义本身

类成员定义中的名字查找
1. 检查成员函数局部作用域声明
2. 检查类成员的声明
3. 检查此成员函数之前的作用域中出现的声明

建立对象时
A x;   - 定义对象x
A x(); - 声明返回值类型为A的x函数

构造函数初始化顺序为成员定义的次序
如果类无默认的构造函数，则不能用作动态数组的元素类型

友元 - 类对其非公有成员访问授予指定函数/类

static数据成员为类域中的全局变量，必须在类定义体外部定义一次
static成员函数为类域中的全局函数，无this指针，如果在类外定义，无需static
#+begin_src c++
#include <iostream>
#include <vector>
#include <numeric>
using namespace std;

class A
{
public:
    A();
    A(int i) { cout << "ctor2" << "\n";};
    A(int i, int j) { cout << "ctor3" << "\n";};
    virtual ~A() {};
    static int i;
    static void x();
};

A::A()
{
    cout << "ctor1" << "\n";
}

int A::i = 10;

void A::x()
{

}

int main(int argc, char *argv[])
{
    A x;
    A y(1);
    A z(1, 2);
    return 0;
}
#+end_src

** 复制控制
- 复制构造函数 未定义会自动生成一个
接受单个类类型引用实参
定义复制构造函数为private，实现防止复制

#+begin_src c++
#include<iostream>
using namespace std;
class Test
{
private:
    int a;
public:
    //构造函数
    Test(int b)
    {
        a=b;
        printf("constructor is called\n");
    }
    //拷贝构造函数
    Test(const Test & c)
    {
        a=c.a;
        printf("copy constructor is called\n");
    }
    //析构函数
    ~Test()
    {
        cout<<"destructor is called\n";
    }
    void Show()
    {
        cout<<a<<endl;
    }
};

int main()
{
    Test A(100);
    Test B=A;
    B.Show();
    return 0;
}
#+end_src

- 赋值操作符 未定义会自动生成一个
- 析构函数
与类名相同，只是在函数名前面加一个位取反符~，以区别于构造函数。
不带任何参数，也没有返回值（包括void类型）
只能有一个析构函数，不能重载。
如果用户没有编写析构函数，编译系统会自动生成一个缺省的析构函数（即使自定义了析构函数，编译器也总是会为我们合成一个析构函数，并且如果自定义了析构函数，编译器在执行时会先调用自定义的析构函数再调用合成的析构函数）
你写下的析构函数并不是真正的完整版的析构函数，一定要加上编译器自动生成的那部分，只是，对若干简单类，编译器自动生成的那部分为空。
- 管理指针
a. 一个带指针成员，采取常规指针型行为
b. 智能指针
使用计数
创建类的新对象，初始化为1
作为另一个对象副本创建时，增值
对一个对象赋值，减少左操作数的个数，并增加右操作数计数
A中定义指向计数类的指针
#+begin_src c++
#include <iostream>
using namespace std;

int main()
{
	string *s1 = new string("s1");

	shared_ptr<string> ps1(s1);
	shared_ptr<string> ps2;
	ps2 = ps1;

	cout << ps1.use_count()<<endl;	//2
	cout<<ps2.use_count()<<endl;	//2
	cout << ps1.unique()<<endl;	//0

	string *s3 = new string("s3");
	shared_ptr<string> ps3(s3);

	cout << (ps1.get()) << endl;	//033AEB48
	cout << ps3.get() << endl;	//033B2C50
	swap(ps1, ps3);	//交换所拥有的对象
	cout << (ps1.get())<<endl;	//033B2C50
	cout << ps3.get() << endl;	//033AEB48

	cout << ps1.use_count()<<endl;	//1
	cout << ps2.use_count() << endl;	//2
	ps2 = ps1;
	cout << ps1.use_count()<<endl;	//2
	cout << ps2.use_count() << endl;	//2
	ps1.reset();	//放弃ps1的拥有权，引用计数的减少
	cout << ps1.use_count()<<endl;	//0
	cout << ps2.use_count()<<endl;	//1
}
#+end_src

** 重载操作符与转换

可以像调用普通函数一样，调用重载操作符函数

原则
- 不重载具有内置含义的操作符
- 大多数操作符对类对象没有意义
- 如果类有算术或位操作，最好也提供相应的复合赋值操作符
- 如果使用关联容器，应定义相等和关系操作符

选择成员/非成员实现操作符重载原则
- =,[],() 必须为成员
- 复合赋值通常定义为类成员
- 改变对象状态/给定类型紧密联系的操作符，类成员
- 对称的操作符，最好定义为普通非成员
- I/O操作符，必须为非成员函数


| 重载操作符 | 原则                                                                                                                   |
|------------+------------------------------------------------------------------------------------------------------------------------|
| <<         | 要指明错误等匹配标准库的行为和方法，非成员实现，对应类将其设为友元                                                     |
| +          | 并不改变操作符的状态，操作符为const对象引用，并产生返回一个新对象，所以+=比+更高效                                     |
| =          | 必须为类成员，可以重载，一般情况下均返回对象引用                                                                       |
| []         | 必须为类成员函数，因其需要在左右操作数合法，需返回值为引用                                                             |
| * ->       | ->必须定义为类成员，不可有显式形参                                                                                     |
| ++, --     | 为了和内置类型一致，前缀式操作符应返回被增量或减量的对象引用，后缀式操作符比前缀多一个int的无用参数，即operator++(int) |
| ()         | 必须为类成员，重载此操作符被称为函数对象                                                                               |

一般将算法和关系操作符定义为非成员函数，将赋值操作符定义为成员
操作符+返回一个右值，而复合赋值返回对左操作数的引用
定义重载操作符的目的是为了方便使用库函数

下标操作符一般定义两个版本
- 非const引用并返回引用
- const成员并返回const引用

成员访问操作符(*, ->)，

对于指针x->p
- x为指针，指向具有名为action对象，则为调用action成员
- action如定义operator->，则x->p与x.operator->()相同
- x是对象本身，同时定义了operator->，则调用x.operator->()后用返回值执行->p
重载箭头操作符必须返回指向类类型的指针，或者返回定义了自已的箭头操作符的类类型对象

转换函数必须为成员函数，不可指定返回类型，形参表必须为空
#+begin_src c++
operator Type ()  // operator 表示定义类型转换函数，Type 表示返回值，没有参数；
{    // 函数体表示普通的函数体内容；
    Type ret;

    // ...

    return ret;
}
#+end_src

使用构造函数可进行隐式转换，且构造形参不必与所提供的类型完全匹配
如果两个转换操作符都可用在一个调用中，而且在转换函数之后存在标准转换，则根据该标准转换的类别选择最佳匹配，否则二义性出错
当两个构造函数的定义转换都可以使用时，如果存在构造函数实参所需的标准转换，则用标准转换的类型选择最佳匹配，否则二义性出错

同时定义非成员与成员函数，实现同一功能的重载操作符，会造成二义性

- 不要定义相互转换的类
- 避免内置算术类型的转换，即不要定义接受算术类型的重载，不要定义转换到一个以上算术类型

类类型转换之后不能再跟另一个类类型转换，即A转B，B转C，但A不能转为C
当类都定义了转换，会造成二义性，避免的方法:不要编写互相隐式转换成对的类

** 面向对象编程

如果函数在基类中声明为虚函数，则一直为虚函数
C++不要求编译器对象的基类部分和派生部分要物理上连续
*任何可以在基类对象上执行的操作也可以通过派生类对象使用*
对象是非动态的，可用强制标识作用域覆盖虚函数机制x->y::fun();
为虚函数的基类版本定义的默认实参将传经派生类定义的版本，派生使用基类的默认实参而不使用自已的
无论派生列表中的访问标号，派生类对基本类有相同的访问，但会控制派生类对象对基类的成员访问，同时派生访问标号还控制来自非直接派生类的访问
无论派生出多少，基类的static变量只有一个实例

*派生类对象的地址，指针，引用可初始化基类，如B继承A，则可以A* x = new B;但编译器不会自动将派生对象转换为基类类型对象*

函数不可能为静态函数同时为虚函数
*继承类访问基类的权限与程序中其他部分一样，不可访问private*
A派生B, A有一个protected C，只能在B的成员函数中访问C，外部不可访问

只有通过引用/指针调用，虚函数才在运行时确定
#+begin_src c++
#include <iostream>
using namespace std;

class A
{
public:
    A() {
        cout << "A ctor" << "\n";
    }
    virtual ~A() {
        cout << "A dtor" << "\n";
    }

public:
    virtual void show()
        {
            cout << "A show" << "\n";
        }
};

class B : public A
{
public:
    B() {
        cout << "B ctor" << "\n";
    }
    virtual ~B() {
        cout << "B dtor" << "\n";
    }

    virtual void show()
        {
            A::show();
            cout << "B show" << "\n";
        }
};

int main(int argc, char *argv[])
{
    A *x = new B();
    x->show();
    delete x;
    return 0;
}
#+end_src


如果派生类显示定义了复制构造/赋值，则覆盖了默认定义需要负责对基类成份及成员进行赋值， *赋值操作符履须防止自身赋值*

派生类析构函数不负责撤消基类成员
基类中的析构函数，必须为虚函数，以防止指向派生基类指针释放错误

*如果在构造/析构函数中调用虚函数，则运行的是为构造/析构自身类类型定义的版本*
#+begin_src c++
//A show
//A ctor
//B show
//B ctor
//B dtor
//A dtor
#include <iostream>
using namespace std;

class A
{
public:
    A() {
        show();
        cout << "A ctor" << "\n";
    }
    virtual ~A() {
        cout << "A dtor" << "\n";
    }

public:
    virtual void show()
        {
            cout << "A show" << "\n";
        }
};

class B : public A
{
public:
    B() {
        show();
        cout << "B ctor" << "\n";
    }
    virtual ~B() {
        cout << "B dtor" << "\n";
    }

    virtual void show()
        {
            cout << "B show" << "\n";
        }
};

int main(int argc, char *argv[])
{
    A *x = new B();
    delete x;
    return 0;
}
#+end_src
对象的引用/指针的静止类型决定可访问的成员，如基类指针不可访问派生成员
名字冲突时，派生将覆盖基类成员， *对于成员函数也是如此，原因是编译器会查到第一个名字就结束*，本质原因是基类和派生不在同一作用域
名字查找
- 确定对象，引用指针，静态类型
- 派生到基类查找
- 找到后检查调用合法性
- 如果虚函数同时通过指针或引用，则根据实际绑定类型

派生类的返回类型必须与基类实例返回完全一致，除非虚函数的基类实例返回类类型的引用/指针，则其派生类实例可返回基类实例返回类型的派生类

** 模板和泛型编程

template <class/typename T>
template <class T> inline fn(int i) 函数模板

模板形参作用域，声明模板形参之后直到模板声明或定义的末尾处使用

模板形参的名字只能在同一模板形参表使用一次

模板可声明不定义，同一模板的声明和定义中，形参名字不必相同
#+begin_src c++
#include <iostream>
using namespace std;

template<class U> U calc(U&, U&);
template <typename T>
inline T calc (T& a, T& b)
{
    return a + b;
}

int main(int argc, char *argv[])
{
    int i = 1;
    int j = 2;

    cout << calc(i, j) << "\n";
    return 0;
}
#+end_src

如果在模板定义内部指定类型，需用typename显示指出

泛型编程原则，对实参需要尽可以少

多个类型形参的实参必须完全匹配，模板函数不会转换实参以匹配已有的实例化，相反，会产生新的实例，除非
- const可用非const对象的引用/指针调用
- 数组和函数可转化为对应的指针

函数模板定义在别的源文件中使用，可用export，而类定义不用，类成员函数需要

模板设计者：保证所有不依赖于模板形参的名字在模板本身的作用域中定义
模板用户  : 与用来实例化模板的类型相关的所有函数类型和操作符的声明可见

类模板成员函数只有为程序所用才进行实例化
g++会合并同一种类型的模板实例化（目标文件会生成重复的函数），模板实例的符号是弱符号

类模板可以有静态成员，但因为其有不同类型的实例，所以不可通过类模板名直接引用静态成员
#+begin_src c++
#include<iostream>
using namespace std;
const double PI=3.14159;
template<typename T>
class Circle{
    T radius;
public:
    static int total;
    Circle(T r=0){
        radius=r;
        total++;
    }
    void SetRadius(T r){
        radius=r;
    }
    T GetRadius()const{
        return radius;
    }
    double GetArea()const{
        return PI*radius*radius;
    }
    static int ShowTotal();
};

template<typename T>
int Circle<T>::total=0;

template<typename T>
int Circle<T>::ShowTotal(){
    return total;
}

int main(){
    Circle<int>A,B;
    A.SetRadius(10);
    cout<<A.GetArea()<<endl;
    B.SetRadius(100);
    cout<<B.GetArea()<<endl;
    cout<<Circle<int>::ShowTotal()<<endl;
    cout << Circle<int>::total << "\n";
    return 0;
}
#+end_src

函数模式也可以重载，规则如普通重载，但是也存在二义性

*当模板与普通函数同时匹配且优先级相等时，普通函数优先*
* 高级主题
异常处理为与对象类型匹配并且离抛出异常位置最近
执行throw时，不会执行跟在throw后面的语句，而是将其转移至匹配的catch，throw将创建对象，同时传递给对应的catch，最后处理完异常后撤销
*异常对象通过复制被抛出表达式的结果创建，所以该结果必须为可复制类型*
被抛出对象的静态编译类型决定异常对象的类型
抛出指针通常是个坏主意，因为很可能指针指向的为局部变量，从而引起严重错误
析构函数应从不抛出异常，以免再次触发异常使得强制程序退出，但构造函数可经常抛出异常，但要保证适时撤销
异常以类似于将实参传递给函数的方式抛出及捕获
异常调用时，try语句快中将沿嵌套函数调用链直至找到可匹配的catch，同时在栈展开期间释放局部对象及析构函数

catch语句需要严格匹配
- 非const -> const
- 派生类 -> 基类类型
- 数组传换为数组类型的指针



